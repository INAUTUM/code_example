Попробую объяснить немного неформально, что означает << и >>. Например у нас есть такой код:

#include <stdio.h>

main ()
{
  char a = 5 << 2;
  printf("%d\n", a);
}
У нас есть число 5 в десятичной системе счисления. 
Если его перевести в двоичную, будет: 0000 0101. Теперь берём и "сдвигаем" 
это двоичное представление влево на 2 позиции, добавляя справа нули: 
0001 0100. А теперь переведём обратно получившееся двоичное число в 
десятичную систему счисления: 20. Если скомпилировать данный код и запустить, 
будет выведено: 20. Аналогично и для операции >>, только сдвиг вправо.


Это бинарные операторы.

<< >> - Операторы сдвига.

& - Побитовое "И"

| - Побитовое "ИЛИ"

^ - Исключающее "ИЛИ"

~ - Оператор дополнения.

К примеру конструкция 1 << i очень популярна, если нужно получать степени двойки (очень быстро). 1 << 2 = 4 = 2 в степени 2, 1 << n = 2 в степени n.